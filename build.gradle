plugins 
{
    id 'java'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories 
{
    mavenCentral()
}

sourceSets 
{
    main 
    {
        java 
        {
            srcDir 'src/main'
        }
    }

    test 
    {
        java 
        {
            srcDir 'src/test'
        }
    }
}

dependencies 
{
    // Add JUnit dependency for testing
    testImplementation 'junit:junit:4.13.2'
    implementation files('libs/byte-buddy-1.12.8.jar')
    implementation files('libs/byte-buddy-agent-1.12.8.jar')
    implementation files('libs/JUnitParams-1.0.2.jar')
    implementation files('libs/mockito-core-4.4.0.jar')
    implementation files('libs/objenesis-3.2.jar')
}

// Define a task to Run a Test
task RunTest(type: Test)
{
    // Specify the directory containing test classes
    testClassesDirs = sourceSets.test.output.classesDirs
    
    // Optionally configure test options
    testLogging 
    {
        // Configure which events to log during test execution
        events 'passed', 'skipped', 'failed'
    }
}

// Define a task to build an executable JAR file
task BuildJar(type: Jar) 
{
    archiveBaseName = 'hotel' // Name of the JAR file

    manifest 
    {
        // Set the main class for the JAR
        attributes 'Main-Class': 'com.example.Main' 
    }

    // Include compiled classes in the JAR
    from sourceSets.main.output

    // Output directory for the JAR file
    destinationDirectory = file('build/libs')
}


// Task to copy resource files to a specific directory
task copyResources(type: Copy) 
{
    from 'src/main'
    into 'build/resources/main'
    exclude '**/*.class'  // Exclude compiled class files
}


// Task to create a zip archive of the project
task createZip(type: Zip) 
{
    // Include the build directory in the ZIP file
    from 'build'

    // Set the name of the ZIP file
    archiveFileName.set('Assignment1.zip')

    // Set the destination directory for the ZIP file
    destinationDirectory.set(file('build/distributions'))  
}


// Task to push build folder to GitHub
task pushToGitHub(type: Exec) 
{
    workingDir project.rootDir
    def repoUrl = 'https://github.com/ghkdgksrl/HOTEL.git'

    doFirst 
    {
        println "Current directory: ${workingDir}"
        
        if (!file('.git').exists()) 
        {
            throw new GradleException("Git repository not found. Please initialize Git first.")
        }

        def branchName = new ByteArrayOutputStream()
        exec 
        {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = branchName
        }

        branchName = branchName.toString().trim()
        println "Current branch: ${branchName}"

        def status = new ByteArrayOutputStream()
        exec 
        {
            commandLine 'git', 'status'
            standardOutput = status
        }
        println "Git status: ${status.toString()}"

        exec 
        {
            commandLine 'git', 'remote', 'set-url', 'origin', repoUrl
        }
        
        exec 
        {
            commandLine 'git', 'remote', '-v'
            standardOutput = System.out
        }
    }

    commandLine 'git', 'push', '-u', 'origin', 'HEAD:main'

    standardOutput = System.out
    errorOutput = System.err

    ignoreExitValue true

    doLast 
    {
        def result = executionResult.get()

        if (result.exitValue != 0) 
        {
            println "Git push failed. Exit code: ${result.exitValue}"
            throw new GradleException("Git push failed")
        } 
        
        else 
        {
            println "Push to GitHub completed successfully."
        }
    }
}